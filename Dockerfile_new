#############################
#     设置公共的变量         #
#############################
FROM alpine:latest AS dependencies
# 作者描述信息
MAINTAINER danxiaonuo
# 时区设置
ARG TZ=Asia/Shanghai
ENV TZ=$TZ

# 镜像变量
ARG DOCKER_IMAGE=danxiaonuo/blog
ENV DOCKER_IMAGE=$DOCKER_IMAGE
ARG DOCKER_IMAGE_OS=alpine
ENV DOCKER_IMAGE_OS=$DOCKER_IMAGE_OS
ARG DOCKER_IMAGE_TAG=latest
ENV DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG
ARG BUILD_DATE
ENV BUILD_DATE=$BUILD_DATE
ARG VCS_REF
ENV VCS_REF=$VCS_REF

# ##############################################################################

# ***** 设置变量 *****

# HUGO站点路径
ARG HUGO_PATH=/blog
ENV HUGO_PATH=$HUGO_PATH
# blog访问令牌
ARG accessUserName=danxiaonuo
ENV accessUserName=$accessUserName
ARG accessToken=y3jVTvQ2MRm7um-ygu8y
ENV accessToken=$accessToken

ARG HUGO_BUILD_DEPS="\
      tzdata \
      ca-certificates \
      asciidoctor \
      libc6-compat \
      libstdc++ \
      pcre \
      nodejs \
      nodejs-npm \
      git \
      curl \
      wget \
      gcc \
      g++ \
      make \
      libffi-dev \
      openssl-dev \
      libxml2-dev \
      libxml2-utils \
      libxslt \
      musl-dev \
      libxslt-dev \
      jq \
      bash"
ENV HUGO_BUILD_DEPS=$HUGO_BUILD_DEPS

ARG PY_DEPS="\
      python3 \
      python3-dev"
ENV PY_DEPS=$PY_DEPS


ARG FONT_DEPS="\
      font-adobe-100dpi \
      ttf-dejavu \
      fontconfig"
ENV FONT_DEPS=$FONT_DEPS

ARG PWA_DEPS="\
      workbox-build \
      gulp \
      gulp-uglify \
      readable-stream \
      uglify-es"
ENV PWA_DEPS=$PWA_DEPS

# ##############################################################################

####################################
#          构建运行环境             #
####################################
FROM dependencies AS build

# 修改源地址
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories
# ***** 安装相关依赖并更新系统软件 *****
# ***** 安装依赖 *****
RUN set -eux \
   # 更新源地址
   && apk update \
   # 更新系统并更新系统软件
   && apk upgrade && apk upgrade \
   && apk add -U --update $HUGO_BUILD_DEPS $PY_DEPS $FONT_DEPS \
   # 更新时区
   && ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime \
   # 更新时间
   && echo ${TZ} > /etc/timezone
      

# ***** 安装HUGO *****
RUN set -eux \
#   && export HUGO_DOWN=$(curl -s https://api.github.com/repos/gohugoio/hugo/releases |jq -r .[].assets[].browser_download_url| grep -i 'extended'| grep -i 'Linux-64bit.tar.gz'|head -n 1) \
    && export HUGO_DOWN="https://github.com/gohugoio/hugo/releases/download/v0.71.1/hugo_extended_0.71.1_Linux-64bit.tar.gz" \
    && wget --no-check-certificate -O - $HUGO_DOWN | tar -xz -C /tmp \
    && mv /tmp/hugo /usr/bin/hugo \
    && chmod +x /usr/bin/hugo \
    && rm -rf /tmp/*
	
	
# ***** 升级 setuptools 版本 *****
RUN set -eux \
    && python3 -m ensurepip \
    && rm -r /usr/lib/python*/ensurepip \
    && pip3 install --upgrade pip setuptools wheel pycryptodome lxml cython beautifulsoup4 \
    && if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi \
    && if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi \
    && rm -r /root/.cache
  

# ***** 安装字体库 *****
RUN mkdir /usr/share/fonts/win
COPY ./font/. /usr/share/fonts/win/
RUN chmod -R 777 /usr/share/fonts/win && fc-cache -f

# ***** 安装 PWA *****
RUN set -eux \
    && npm install $PWA_DEPS --save-dev && npm update
	

# ***** 安装 Hugo-Encryptor *****
RUN set -eux \
    && wget -O /usr/bin/hugo-encryptor.py https://cdn.jsdelivr.net/gh/Li4n0/hugo_encryptor/hugo-encryptor.py \
    && chmod +x /usr/bin/hugo-encryptor.py
	

# ***** 设置HOGO环境变量 *****
ENV PATH /usr/bin/dumb-init:$PATH
ENV PATH /usr/bin/hugo:$PATH
ENV PATH /usr/bin/hugo-encryptor.py:$PATH


# ***** 工作目录 *****
WORKDIR ${HUGO_PATH}


# ***** 克隆源码并生成静态文件 *****
RUN set -eux \
    && git clone --progress https://$accessUserName:$accessToken@gitlab.com/danxiaonuo/blog.git ${HUGO_PATH} \
	&& git submodule update --init --recursive \
    && /usr/bin/hugo || true \
    && python3 /usr/bin/hugo-encryptor.py || true \
    && find . -name "*.md" | xargs rm -Rf

##########################################
#         构建基础镜像                    #
##########################################
# 
# 指定创建的基础镜像
FROM danxiaonuo/nginx:latest

# http://label-schema.org/rc1/
LABEL maintainer="danxiaonuo <danxiaonuo@danxiaonuo.me>" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="$DOCKER_IMAGE" \
      org.label-schema.schema-version="1.0" \
      org.label-schema.url="https://github.com/$DOCKER_IMAGE" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/$DOCKER_IMAGE" \
      versions.dumb-init=${DUMBINIT_VERSION}


# 工作目录
WORKDIR /www/blog

# 拷贝资源文件
COPY --from=build /blog/public /www/blog
COPY conf/blog/vhost/default.conf /data/nginx/conf/vhost/default.conf

# 容器信号处理
STOPSIGNAL SIGQUIT

# 入口
ENTRYPOINT ["dumb-init"]

# 启动命令
CMD ["nginx", "-g", "daemon off;"]
